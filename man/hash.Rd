% Generated by roxygen2 (4.0.0): do not edit by hand
\name{hash}
\alias{\%hl+\%}
\alias{\%hl\%}
\alias{hash}
\alias{hash_look}
\title{Hash/Dictionary Lookup}
\usage{
hash(x)

hash_look(terms, key, missing = NA)

terms \%hl\% key

terms \%hl+\% key
}
\arguments{
\item{x}{A two column dataframe.}

\item{terms}{A vector of terms to undergo a lookup.}

\item{key}{The hash key to use.}

\item{missing}{Value to assign to terms not found in the hash table.}
}
\value{
Creates a "hash table", a two column data frame in its own
environment.
}
\description{
\code{hash} - Creates a \pkg{data.table} based hash table for quick hash
style dictionary lookup.

\code{hash_look} - Works with a hash table such as is returned from
\code{hash}, to lookup values.

\code{\%ha\%} - A binary operator version of \code{hash_look}.

\code{\%ha\%} - A binary operator version of \code{hash_look}
for when \code{key.match} is a data.frame or named list and \code{missing} is
assumed to be \code{NULL}.
}
\examples{
(DF <- aggregate(mpg~as.character(carb), mtcars, mean))
x <- sample(DF[, 1], 20, TRUE)
new.hash <- hash(DF)
x2 <- c(9, 12, x)
hash_look(x, new.hash)

x \%hl\% new.hash
x2 \%hl\% new.hash
x2 \%hl+\% new.hash

## Create generic functions
hfun <- function(x, ...) {
    hsh <- hash(x, ...)
    function(x, ...) hash_look(x, hsh, ...)
}

m <- hfun(DF)
m(x)
}
\seealso{
\code{\link[qdapTools]{lookup}}
}
\keyword{dictionary,}
\keyword{hash,}
\keyword{lookup}

